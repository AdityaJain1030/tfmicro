name: Rust

on: [push, pull_request]

jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: textbook/git-checkout-submodule-action@2.1.1
      - uses: docker://gcc
      - name: Build tensorflow
        run: |
          sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -yqq xxd git
          cd submodules/tensorflow
          sudo make -f tensorflow/lite/micro/tools/make/Makefile test_magic_wand_test
          sudo chmod a+rwx -R .
          echo "::set-env name=TF_HASH::$(git submodule status | awk '{print $1}')"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ env.TF_HASH }}-${{ hashFiles('**/build.rs') }}
      - uses: actions-rs/toolchain@master
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: Build
        run: |
          cargo build --verbose --all-targets --features=no-c-warnings
          cargo test --verbose  --all-targets --features=no-c-warnings

  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: textbook/git-checkout-submodule-action@2.1.1
      - uses: docker://gcc
      - name: Build tensorflow
        run: |
          sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -yqq xxd git
          cd submodules/tensorflow
          sudo make -f tensorflow/lite/micro/tools/make/Makefile test_magic_wand_test
          sudo chmod a+rwx -R .
          echo "::set-env name=TF_HASH::$(git submodule status | awk '{print $1}')"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ env.TF_HASH }}-${{ hashFiles('**/build.rs') }}
      - uses: actions-rs/toolchain@master
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: Build
        run: |
          cargo build --release --verbose --all-targets --features=no-c-warnings
          cargo test --release --verbose  --all-targets --features=no-c-warnings
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: textbook/git-checkout-submodule-action@2.1.1
      - uses: docker://gcc
      - name: Build tensorflow
        run: |
          sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -yqq xxd git
          cd submodules/tensorflow
          sudo make -f tensorflow/lite/micro/tools/make/Makefile test_magic_wand_test
          sudo chmod a+rwx -R .
          echo "::set-env name=TF_HASH::$(git submodule status | awk '{print $1}')"
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ env.TF_HASH }}-${{ hashFiles('**/build.rs') }}
      - uses: actions-rs/toolchain@master
        with:
          toolchain: nightly
          override: true
          components: clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets  -- -D clippy::all
